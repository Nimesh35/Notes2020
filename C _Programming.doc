

  1 ) IDE (Integrated Development Environment)
  
  2 ) Compiler (Translator)  -----> TC (Turbo c) , Mingw, gcc


=======================================================================================================

  Program Structure of C Language



  1) Inclusion section                   
							#include<stdio.h>

  2) Definition section
							#define MAX 5

  3) Global declaration section
							int val=500;
					
  4) function prototype / function declaration
			
							void add();
 
 5) main function definition
							void main() {    add(); //function calling  }

 
 6) function definition
							void add() { }

========================================================================================================

  Create Program in Dev C++ IDE
  Save program                        extension name ( .c )

  Addition.c :   program file / source program / source file / source code

             :   includes english like code ( c programming code )
=======================================================================================================


   Comment :  non executable part of a program

   Type of comments : 1) Single line comment  - To hide a single line from program

				// instruction will not be execute
                            
 

		      2) Multiline comment - To hide multiple lines from program

                               /*  instruction1
                                   instruction2
                                   instruction3

                               */

              Note : - Comments can not be enclosed in other comment    /* /* */ */  invalid

   Use of comment - Makes a program more readable

=========================================================================================================

    
   Statement :   which may end with ; (semicolon)
             :     int x;

====================================================================

   Execution : To run the program

   1) Pre proccessing :
                        Preprocessor statements (starts with # ) are executed 
                        #include < stdio.h > ,  semicolon not required

                        header file : extension (.h) , predefined program

   2) Compilation : 
                      Compiler checks program for syntactical errors like semicolon not found

                     Source program (.c) ---------> compiler ---------> Object code (.obj) in binary form
               
                     Add.c --------> Compiler-----------------> Add.obj

   3) Linking :
                printf();  ------ > stdio.h
                function call (call the function ) -------------------Exceution control--------------------> function definition (Code for function)


   4) Execution :
                   instruction fetched, instruction decoded, operand fetch, instruction execution



===========================================================================================================


 Error : programming mistake

         Type of error : 1) syntax 
					associated with synctical rules ( ; missing ) 
                         2) Linker     
                                        st.h ( header file does not exists )

                         3) Run time
                               
					divide by zero
                         4) Logical
				        (4+2)*2 = 12
                                         4+2*2  = 8
============================================================================================================


  Type of statements 
  
  1) Pre processing  :
                      starts with # , Dont write semicolon ( ; )

  2) Declarative     : 
                      int num;

  3) Executable      :
                  a) Input / output statements :  printf(); ,  scanf();
                  b) Asignment statements      :  = (Assignment Operator) , age = 20;
                  c) Conditional statements    : if...else  , if(condition) 
                  d) Looping statements        : while, do while, for
                  e) Function calling          : add(); , printf();
                  f) Special statements        : break;  , continue;  , exit; , return;

=============================================================================================================

 Keywords : Reserved words

            int,void,float,char, do, while, if

 variables :  named memory location
              changes its value in the program
              int a=30;
		

 identifiers :
              a variable defines the purpose of variable
              int age=30;


 
               numeric variable : int a;
               constants        : #define PI 3.14

               String variable  : char *str;
               String constant  : char *str="Hello";


  Rules to define identifiers :
  
  1) starts with alphabet (year) / alphanumeric ( year2020 )
  2) _ (underscore)
  3) space between variablename not permitted  , firstName (valid), first name (invalid)
  4) variable length depends on compiler.
  5) should not make variable as a keyword name
  6) variable name should not start with numeric

=========================================================================================

 Charateristics of of Good Program

 1) Correctness 
 2) Clarity
 3) Documentation (use of comments)
 4) Indentation 
 5) Robust

=========================================================================================

  main() function :
                   starting point of program from where execution of program happens.
                   Compiler calls main function



  Data type :
               represents type of data a variable can hold

               1) Primitive data type     : predefined
                                                      int, float ,char, double (simple data type)



               2) Non primitive data type : User defined / Structured data type
                                                      Array , Structure, Union


  int x=10;

  char c='D';           // character is represented in single quote '

  float f=1.32;         // Fractional values

  double d=3.1234


  Data type          Size                 signed Range         unsigned 
  
  char  -----------  1 byte               -128 to 127         0 to 255             2 ^ 8 = > 256

  int   -----------  2 / 4 bytes          -32768 to 32767     0 to 65535           2 ^ 16 => 65536

  float -----------  4 bytes                                                       2 ^ 32 => 4294967296

  double ----------  8 bytes                                                       2 ^ 64 => 


  ===================================================================================================

   
   Format String :  is written with %character in " "

   "%d"  ===== integer
   "%f"  ===== float
   "%lf" ===== double
   "%c"  ===== character
                  

  Syntax :

  
    printf("Hello");


    printf("format string",variablename);

================================================

  Operators : Symbol which performs operations between operands


  1) Arithmatic          + - * /  % (Modules)

  2) logical             &&(AND)  || (OR)  !(Not)

  3) Relational          <  >  <=   >=  ==  !=
  
  4) increment& decrement   ++ (incremet : Pre increment & Post increment),  --
  
  5) Assignment          =   +=  -=  /=  *= 
   
  6) Bitwise             &(AND)  | (OR) ^ (NOt)


 =================================================

 How to read value from keyboard ?

 scanf() :
         
  Syntax :   scanf("formatString",&variablename); 


             Read an integer : scanf("%d",&x);
             
             & means address of

===================================================

 Division ( / )

 result = op1 / op2

 op1 (int) , op2(int)   => result (int)

 op1 (float) , op2(int)   => result (float) 

 op1 (int) , op2(float)   => result (float)

 op1 (float) , op2(float)   => result (float)


====================================================

 Type Casting :
                 Conversion of one type of data to another type of data.

                 integer to float  


 Operator : 1) Unary  : works on single operand  ++a, --a, -b

            2) Binary : works on two operands  a+b , a*b 

 increment operator :
                     Pre increment  : ++a => a=a+1

                     Post increment : a++ => a=a+1

=============================================================

function:
          grouping of statements 
          block of code where you write the logic
          step by step process to solve a problem
          
        1) function has the body  { }
        2) function has name           main()
        3) function has return type    void , int
        4) function has parameters     add(3,4)
        5) function can be called       add();


 Note : C follows Top Down approach

  returnType : int,void,char,float,double

  functionName : Add,Sum,Div,Sub

  Parameter List : int a, float b, char c

  arguments : values passed to function

   
  Syntax of function definition:
    
  returnType functionName(Parameter List)
  {
      // Body of function
  }

 
  syntax of function Declaration / Prototype

 	 returnType functionName(Parameter List);


  Syntax of function calling :

         functionName(Parameter List);

  
 Steps to create function in C Program :

 1) Function Prototype / Declaration
 2) function Definition
 3) Function call


=========================================================================
 Type of functions :

 1) Predefined functions / Library function
      
            Ex : printf(), scanf() ,getch().........


 2) User defined functions

            Ex : sum(), getDetails()

========================================================================

  Recursion :
              A function calls itself.

             A() calls A()

 =====================================================================

 Decision Control statements :
                            condition is given 
 
 1) if 
		
           Syntax :
 
           case -1   execute single statement, { } not required

                    if(condition)
			statement;

	   Case-2   execute multiple statements, { } is must

		    if(condition)
                    {
			statement-1;
			statement-2;
              
		    }

 2) if....else

	   Syntax :


		if(condition)
			statement-1;
		else
			statement-2;

             
                
		if(condition)
		{
			statement-1;
			statement-2;
		}
		else
		{
			statement-3;
			statement-4;
		}



 3) if....else if....else ladder

         syntax :
                
               if(condition-1)
			statement-1;
	       else if(condition-2)
			statement-2;
	       else if(condition-3)
			statement-3;
	       else
			statement-4;



 4) Nested if statement

         syntax :

               if(condition-1)                  // outer if
	       {
			statements;
			if(condition-2)         // inner if
			{
				ststement-1;
			}
			else
			{
				statement-2;
			}
        	}
		else
		{
			statement-3;
		}



======================================================================

Swich.....Case


  Syntax :

	    Expression can be integer or character

            switch(expression)
	    {
		case value1:
				statement-1;
				break;
		case value2:
				statement-2;
				break;
		case value3:
				statement-3;
				break;
		default:
				statement-4;
	    }

=======================================================================

Ternary operator / Conditional operator -----    ?:

   Syntax :
            condition ? value1 : value2; 

=======================================================================

Loop :
        iterative way of executing the statements

	Type of Loops : 
         
        1) for
		1) header 2) body

                1) header contains 3 parts :  initialization , condition , statement (increment/decrement)


		Syntax :
                        for(initialization ; condition ; statement )         // Header
			{                                                    // Body
				statements;
			}

          int x=10;  // initialization

          x<50       // condition

          x++        // increment statement

==========================================================================
         
 Inner for loop
		
		Syntax :
  			for(i=0;i<5;i++)         // Outer for
			{
				for(j=0;j<5;j++)  // inner for
				{

				}
			}
		
        2) while
		
		Syntax :

			initialization;

			while(condition)
			{

				Statements;
			   Increment / Decrement;
			}

			
        3) do....while        

		Syntax :
                  
                       initialization;
		       do
		       {
				statements;
				increment / decrement;	       
		       }while(condition);

==================================================================================

break : used to break or exit from Loop

       
continue : To skip the specific iteration in a loop

=================================================================================

Types of variable :


                  1) Local variable : Sope limited to a block or function


                  2) Global variable : Scope is througout the program


                  3) Static variable : Its value is updated in the programs


===================================================================================

Array : 
       Structured variable,
       grouping of similar datatype elements
     
       int age1;
       int age2;
       int age3;
       ....
       ....
       int age100;


       syntax :
               
		datatype arrayName[SizeOfArray];    // Declaration of Array

                int ages[5];    // Declares array of ages of 5 studnts

                Array has the index value , starts from 0 
 
       Initialization of Array :
                         
                           
               Syntax :    arrayName[index]=value;

               ages[0]=20;   // Assign age of first student
	       ages[1]=30;
 	       ages[2]=25;
	       ages[3]=22;
	       ages[4]=28;

       Lower Bound : 0   , first element of array   
       Upper Bound : 4   , Size-1 , last element of array

    
      Accessing of Array element :
      
      
		ages[2] ====> Accessing of 3rd Student age


               printf("%d",ages[2]);   // 25


    Type of Array
    1) One Dimensional : Single Dimension           []

    2) Multidimensional : Multiple dimensions       [][] ---- 2d Array


   Disadvantage of Array:
			Wastage of memory

========================================================================================
	String : 
		collection of characters
                ends with  \0 (called as NULL character)
            
                abc\0

        Declaration of String:
                  
                 Syntax :  
			char s[5];   // String of 5 characters

        Initialization of string :

	                char str[]="Hello";			// 1st way

                        char str[10]="Hello";    		// 2nd way

			char str[]={'H','E','L','L','O','\0'};  // 3rd way		         

     			char str[6]={'H','E','L','L','O','\0'}; // 4th way

	How to display a string value ?
                        
                        %s to display string value

 =====================================================================================

 String Functions :
				Header file : string.h

                   strlen()  : 
				Used to find string length (no of characters in a string)

                   strcpy()  : 
				Used to copy a string into an array

                   strcmp()  : 
				Compare two strings

	           strcat()  : 
				Concatenates two strings

======================================================================================

Pointer :
    
	variable which holds address of a memory location / address of another variable.

        * (derefering operator)

       Syntax :
                   datatype *pointervariable;

                   int*   p1;          // p1 is pointer variable of type integer ( Integer pointer)
		   char  *p2;         // p2 is character pointer
                   float *p3         // p3 is float pointer



		    variable declaration :   int x;    // x is a variable


		    int x=50;       // printf("%d",x);   // 50

		    int *p1;

 		    p1 = &x;        // &x means address of x,  p1 will hold address of x.

 Pointers & Array

        Pointer to Array :
                            int num[]={1,2,3,4,5};
                            int *p1;

			     p1=num;    // Pointer to array       

 character pointer pointing to character array
                             
                            char city[]="Delhi";

                            char *p=city;              


 Passing a pointer to a function

                            void showdata(int *p1);   // Function which accepts one argument as a pointer


			    void showdata(int *p1)    // Function definition   p1=p;
			    {

                            }

			    main() { 
 				
					int *p;
					showdata(p);         
 				    }

 Passing an address of a variable to a function

                            void show(int *p)
			    {
				
			    }

                            int a;
                            
			    show(&a);  // Passing address of variable a to the function

   Function calling can be done in two ways :
   
   1) Call by value
   			add(a,b);


			void add(int x,int y)
			{

			}

   2) Call by address
			add(&a,&b);


			void add(int *x,int *y)
			{

			}

  Difference between Call by value and call by address :
  
  1) Call by value , value of a variable is copied into the parameter
     Call by address, Address of a variable is paased as a parameter 

  2) Call by value does not change the original data passed to function
     call by address, Original data passed to function is modified

  3) Call by value, values are passed to the function without  &
     Call by address, Address is passed to the function with  &


  Returning pointer value to the function :

  					   int* getSquare()
					   {
						int *p;
						return p;
					   }



               				   main()
					   {

						int *p1=getSquare();
					   }


  
 Dynamic Memory allocation:    increase / decrease the size of array at run time
                               allocate memory at run time


				int numbers[10];

                   stdlib.h 
                             malloc() ==> memory allocation 

                             return type : void*

				Syntax :
                                         

					ptr = (castType*) malloc(size); //    ptr = (void*) malloc(size);

					int *p = (int*) malloc(n*sizeof(int));

					int *p = (int*) malloc(5*sizeof(int));  // 5*4bytes = 20 bytes

					char *p= (char*) malloc(10*sizeof(char));  // 10*1byte= 10 bytes



                             calloc() ====> Contiguous Allocation 
					n=5 // n= no of elements

				 	calloc(noofelements,sizeof(datatype));

                             
			     realloc() ====> Reallocation function
					     resises the memory allocated for array previously using malloc / calloc function

						n1=4;
						n2=8;                                              

						ptr= malloc(n1*sizeof(datatype));

						ptr= realloc(ptr,n2*sizeof(datatype));
										
                             
			     free() ===> Deallocate memory which is created dynamically
					
					 free(p);

                                 
Dangling pointer :
                  int *p;

		  *p=10;
		  printf("%d",*p);


        // Dangling pointer which does not have any address assigned to it
	          // It points to unknown location
	
	// First way to avoid dangling situation
	// Assign address of a location to the pointer variable p
	      
           int x=4;
	   
	   p=&x;
	
	
	// Second way to avoid dangling situation
	// Allocate dynamic memory to pointer variable using malloc() function

        	p=(int*) malloc(sizeof(int));

===============================================================================================


Structure :
             Grouping of different type of data.
             To maintain multiple records 
             keyword :  struct  ( To define the structure)
             Using struct , you can define the data type of your choice

             Syntax :
                        struct structureName
			{
				structure members;      // Declared in structure body
			};


            Structure Variable : 
                                 
			Syntax :
                                struct stuctureName variablename;

                       Note : Every structure variable will have its own structure member.
	
	     
Accessing of structure member :
                     
             Member operator     . (full stop)
	     
	     Syntax :
 			

			variableName.structureMember;

   
   Keyword : typedef    (type definition) 
             used to create alias / alternate name for data type

           Definition of structure using typedef keyword:

           typedef struct structureName
	   {

	   }aliasName;

           int main()
	   {
		aliasname variable;
	   }


Nested Structure :
		Structure inside a structure

		struct Address
		{
		}
		struct Student
		{
			struct Address a; 
		}


Array of Structure : 
			StructureName var[size];




Passing structure to the function :

                    

                        void show(struct Employee emp)
			{
		
			}

                 
			struct Employee e1;  // e1 is structure variable
			
			show(e1);     // Passing a structure variable to the function
                            


Structure pointer & Accessing the members of structure using structure pointer



	typedef struct Employee
	{
		int a;
	}emp;

	int main()
	{
		emp *p;
		emp e1;
		
		p=&e1;

		p->a = 105;
		
	}
		
Union :
       grouping of different data type elements

       keyword : union

       Advantage of union : It takes less memory to store data as compared to structure
       Disadvantage :   At a time only one type of data can be stored

       Syntax :

		typedef union unionname
		{
			union members
		}alias;

		int main()
		{
			aliasname var;
		}

====================================================================================

File Handling

	     Is a process of managing files / of doing operations in the file like read data from file, write data to the file

	     File : Permanent way of storing data in the system

            1) create a file
            2) Reading a file
	    3) Writing into file

           Structure :    FILE 
           File pointer :  To perform operations on file

           
	Step-1 ) Create a file pointer
                 FILE *fp;    // fp is file pointer
        Step-2) Open a file on the hard disk
		fopen()
	Step-3)  Do the operations on the file like writing or reading

        Note : Every file has some ending characters (EOF = End Of File)

        
       Type of file : 
		     1) Text File : plain text / human readable form (Simple text file)

		     2) Binary File : Not in human readable form (image file)

        Mode of operation :
		     
		     1) Read mode  :    r 
		     2) Write mode :    w
		     3) append     :    a
                     4) Read & write :  r+ , w+

        Predefined functions of File defined in stdio.h

	1) fopen()    : To open a file in any mode
			
			fp=fopen("filename","mode");


	2) fclose()   : To close the file

	3) fprintf()  : To write data into file

                        fprintf(filepointer,"formatstring",variablename);


	4) fscanf()   : To read data from file
        5) fputc()    : To write single character into file
        6) fgetc()    : To read single character from file
	7) fputs()    : To write a line of characters into file
        8) fgets()    : To read a string from a file


  ========================================================================

Function Pointer :
                  Pointer to a function
		
		  void show(int x)
		  {
			printf("x = %d",x);
		  }
	
		  void (*fp)(int) = &show;  // function pointer fp

		  (*fp)(10);              //  Calling of Function through function pointer





















             
























 
   
